---
// Theme toggle component - no props needed
---

<button
  id="theme-toggle"
  aria-label="Toggle theme mode"
  title="Toggle between light, dark, and llama mode"
  class="theme-toggle"
>
  <svg class="sun-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2"/>
    <path d="M12 1v6m0 6v6m11-7h-6m-6 0H1" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
  </svg>
  <svg class="moon-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 A7 7 0 0 0 21 12.79z" stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
  </svg>
  <div class="llama-icon">ðŸ¦™</div>
</button>

<script>
  const toggle = document.getElementById('theme-toggle');
  
  function setTheme(theme: string) {
    document.documentElement.dataset.theme = theme;
    localStorage.setItem('theme', theme);
  }
  
  // Llama rain animation functions
  function startLlamaRain() {
    // Create llama rain container if it doesn't exist
    let rainContainer = document.getElementById('llama-rain');
    if (!rainContainer) {
      rainContainer = document.createElement('div');
      rainContainer.id = 'llama-rain';
      rainContainer.className = 'llama-rain';
      document.body.appendChild(rainContainer);
    }
    
    // Clear any existing llamas
    rainContainer.innerHTML = '';
    
    // Start creating falling llamas
    const createLlama = () => {
      const llama = document.createElement('div');
      llama.className = 'falling-llama';
      llama.textContent = 'ðŸ¦™';
      llama.style.left = Math.random() * 100 + 'vw';
      llama.style.animationDuration = (Math.random() * 3 + 2) + 's'; // 2-5 seconds
      llama.style.animationDelay = Math.random() * 2 + 's';
      rainContainer.appendChild(llama);
      
      // Remove llama after animation
      setTimeout(() => {
        if (llama.parentNode) {
          llama.parentNode.removeChild(llama);
        }
      }, 7000);
    };
    
    // Create initial burst of llamas
    for (let i = 0; i < 15; i++) {
      setTimeout(createLlama, i * 200);
    }
    
    // Continue creating llamas at intervals
    window.llamaRainInterval = setInterval(createLlama, 500);
  }
  
  function stopLlamaRain() {
    // Stop creating new llamas
    if (window.llamaRainInterval) {
      clearInterval(window.llamaRainInterval);
      window.llamaRainInterval = null;
    }
    
    // Remove existing llamas with fade out
    const rainContainer = document.getElementById('llama-rain');
    if (rainContainer) {
      rainContainer.style.opacity = '0';
      setTimeout(() => {
        if (rainContainer.parentNode) {
          rainContainer.parentNode.removeChild(rainContainer);
        }
      }, 1000);
    }
  }
  
  toggle?.addEventListener('click', () => {
    const current = document.documentElement.dataset.theme || 'light';
    let next: string;
    
    switch (current) {
      case 'light':
        next = 'dark';
        break;
      case 'dark':
        next = 'llama';
        break;
      case 'llama':
      default:
        next = 'light';
        break;
    }
    
    setTheme(next);
    
    // Toggle llama rain animation
    if (next === 'llama') {
      startLlamaRain();
    } else {
      stopLlamaRain();
    }
  });
  
  // Make functions globally available
  window.startLlamaRain = startLlamaRain;
  window.stopLlamaRain = stopLlamaRain;
</script>

<style>
  .theme-toggle {
    background: none;
    border: none;
    padding: calc(var(--grid-unit));
    cursor: pointer;
    color: var(--color-text-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 0.2s ease;
  }

  .theme-toggle:hover {
    color: var(--color-accent);
  }

  .llama-icon {
    font-size: 18px;
    line-height: 1;
    display: none;
  }

  /* Show/hide icons based on theme */
  [data-theme="light"] .moon-icon,
  [data-theme="light"] .llama-icon,
  [data-theme="dark"] .sun-icon,
  [data-theme="dark"] .llama-icon,
  [data-theme="llama"] .sun-icon,
  [data-theme="llama"] .moon-icon {
    display: none;
  }

  [data-theme="llama"] .llama-icon {
    display: block;
    animation: bounce 0.6s ease-in-out infinite alternate;
  }

  @keyframes bounce {
    from { transform: translateY(0px); }
    to { transform: translateY(-3px); }
  }

  /* Llama rain styles */
  :global(.llama-rain) {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 9999;
    opacity: 1;
    transition: opacity 1s ease-out;
  }

  :global(.falling-llama) {
    position: absolute;
    top: -50px;
    font-size: 72px;
    line-height: 1;
    animation: fall linear forwards;
    pointer-events: none;
    transform-origin: center;
  }

  @keyframes fall {
    from {
      transform: translateY(-50px) rotate(0deg);
      opacity: 1;
    }
    to {
      transform: translateY(calc(100vh + 50px)) rotate(360deg);
      opacity: 0.7;
    }
  }

  /* Add some variety with different rotation speeds */
  :global(.falling-llama:nth-child(odd)) {
    animation: fall linear forwards, spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>