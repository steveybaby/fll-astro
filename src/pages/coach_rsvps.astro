---
import { getCollection } from 'astro:content';
import Layout from '../components/Layout.astro';
import { formatMeetingTime } from '../utils/meeting-time.ts';

// Get all meetings, filter for future meetings, and sort them chronologically
const meetings = await getCollection('meetings');
const now = new Date();
const futureMeetings = meetings.filter(meeting => {
  const meetingDate = meeting.data.date instanceof Date ? meeting.data.date : new Date(`${meeting.data.date}T00:00:00Z`);
  return meetingDate >= now;
});
const sortedMeetings = futureMeetings.sort((a, b) => {
  const dateA = a.data.date instanceof Date ? a.data.date : new Date(`${a.data.date}T00:00:00Z`);
  const dateB = b.data.date instanceof Date ? b.data.date : new Date(`${b.data.date}T00:00:00Z`);
  return dateA.getTime() - dateB.getTime();
});

// Fixed list of coaches in specified order
const coaches = ['Steve H', 'Steve S', 'Esther R'];

// Coach initials for mobile display
const coachInitials = {
  'Steve H': 'SH',
  'Steve S': 'SS', 
  'Esther R': 'ER'
};

// API endpoint
const RSVP_API_URL = 'https://script.google.com/macros/s/AKfycbwFpY_VgGndIStuh1UOu1wA--QXMDWjVLaiLAjqMDOO58x9dA2H4RkOJ8daCtyc8BNPfQ/exec';

// Helper function to format meeting date
const formatMeetingDisplay = (date) => {
  const raw = date instanceof Date ? date : new Date(`${date}T00:00:00Z`);
  return new Intl.DateTimeFormat('en-US', {
    weekday: 'short',
    month: 'short',
    day: 'numeric',
    timeZone: 'UTC',
  }).format(raw);
};

const formatMeetingMobile = (date) => {
  const raw = date instanceof Date ? date : new Date(`${date}T00:00:00Z`);
  const month = new Intl.DateTimeFormat('en-US', {
    month: 'short',
    timeZone: 'UTC',
  }).format(raw);
  const day = new Intl.DateTimeFormat('en-US', {
    day: 'numeric',
    timeZone: 'UTC',
  }).format(raw);
  return { month, day };
};

const formatMeetingTimeMobile = (startTime, duration) => {
  if (!startTime) {
    return { time: '', duration: '' };
  }
  
  const [hours, minutes] = startTime.split(':').map(Number);
  const period = hours >= 12 ? 'pm' : 'am';
  const displayHour = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;
  const displayMinutes = minutes > 0 ? `:${minutes.toString().padStart(2, '0')}` : '';
  
  const timeString = `${displayHour}${displayMinutes}${period}`;
  const durationText = duration ? (duration === 1 ? '1hr' : `${duration}hrs`) : '';
  
  return { time: timeString, duration: durationText };
};

const formatMeetingISO = (date) => {
  const raw = date instanceof Date ? date : new Date(`${date}T00:00:00Z`);
  return new Intl.DateTimeFormat('en-CA', { timeZone: 'UTC' }).format(raw);
};
---

<Layout title="Coach RSVPs - Team Overview" description="Coach attendance management for all FLL team meetings">
  <div class="rsvp-page-container">
    <header class="rsvp-header">
      <h1>üë• Coach RSVPs</h1>
      <p>Manage coach attendance for all team meetings</p>
      
      <div class="rsvp-updating-global" id="rsvp-updating-global" style="display: none;">
        <div class="updating-spinner-global"></div>
        <span>Saving...</span>
      </div>
    </header>

    <div class="rsvp-loading-global" id="rsvp-loading-global">
      <div class="loading-spinner-global"></div>
      <span>Loading RSVP data from Google Sheets...</span>
    </div>

    <div class="rsvp-error-global" id="rsvp-error-global" style="display: none;">
      <p id="rsvp-error-message-global">Unable to load RSVP data</p>
      <button id="rsvp-retry-global" class="retry-button">Try Again</button>
    </div>

    <div class="rsvp-grid-container" id="rsvp-grid-container" style="display: none;">
      <div class="rsvp-grid">
        <!-- Header row with coach names -->
        <div class="grid-header">
          <div class="meeting-header-cell">
            <span class="desktop-meeting-header">Meeting</span>
            <span class="mobile-meeting-header">Date</span>
          </div>
          {coaches.map((coach) => (
            <div class="child-header-cell" title={coach}>
              <span class="desktop-child-name">{coach}</span>
              <span class="mobile-child-initials">{coachInitials[coach]}</span>
            </div>
          ))}
        </div>

        <!-- Meeting rows -->
        {sortedMeetings.map((meeting) => {
          const isoDate = formatMeetingISO(meeting.data.date);
          const displayDate = formatMeetingDisplay(meeting.data.date);
          const mobileDate = formatMeetingMobile(meeting.data.date);
          const meetingTime = formatMeetingTime(meeting.data.startTime, meeting.data.duration);
          const mobileTime = formatMeetingTimeMobile(meeting.data.startTime, meeting.data.duration);
          
          return (
            <div class="grid-row" data-meeting-date={isoDate}>
              <div class="meeting-cell" title={meeting.data.title}>
                <div class="meeting-info desktop-meeting-info">
                  <a href={`/meetings/${meeting.slug}/`} class="meeting-link">
                    {meeting.data.title}
                  </a>
                  <div class="meeting-date">{displayDate}</div>
                  {meetingTime && <div class="meeting-time">{meetingTime}</div>}
                </div>
                <div class="meeting-info mobile-meeting-info">
                  <a href={`/meetings/${meeting.slug}/`} class="mobile-meeting-link">
                    <div class="mobile-month">{mobileDate.month}</div>
                    <div class="mobile-day">{mobileDate.day}</div>
                    {mobileTime.time && (
                      <div class="mobile-time-container">
                        <div class="mobile-time">{mobileTime.time}</div>
                        {mobileTime.duration && <div class="mobile-duration">{mobileTime.duration}</div>}
                      </div>
                    )}
                  </a>
                </div>
              </div>
              {coaches.map((coach) => (
                <div class="rsvp-cell" data-child={coach} data-meeting-date={isoDate}>
                  <div class="cell-status" id={`status-${isoDate}-${coach}`}>‚ùì</div>
                  <div class="cell-buttons">
                    <button 
                      class="cell-btn cell-yes" 
                      data-child={coach} 
                      data-meeting-date={isoDate}
                      data-status="üëç"
                      aria-label={`Mark ${coach} as attending ${meeting.data.title}`}
                    >
                      üëç
                    </button>
                    <button 
                      class="cell-btn cell-no" 
                      data-child={coach} 
                      data-meeting-date={isoDate}
                      data-status="üëé"
                      aria-label={`Mark ${coach} as not attending ${meeting.data.title}`}
                    >
                      üëé
                    </button>
                  </div>
                  <div class="cell-hover-option">
                    <button class="cell-btn cell-hover-btn" aria-label="Change response">
                      ‚ùì
                    </button>
                  </div>
                </div>
              ))}
            </div>
          );
        })}
      </div>
    </div>
  </div>
</Layout>

<style>
  .rsvp-page-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: calc(var(--grid-unit) * 3);
  }

  .rsvp-header {
    text-align: center;
    margin-bottom: calc(var(--grid-unit) * 4);
    position: relative;
  }

  .rsvp-header h1 {
    font-family: var(--font-heading-primary);
    font-size: 3rem;
    font-weight: 900;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1.1;
    margin: 0 0 calc(var(--grid-unit) * 2) 0;
  }

  .rsvp-header p {
    font-size: 1.125rem;
    color: var(--color-text-muted);
    margin: 0;
  }

  .rsvp-updating-global {
    position: absolute;
    top: calc(var(--grid-unit) * 2);
    right: 0;
    display: flex;
    align-items: center;
    gap: calc(var(--grid-unit) / 2);
    padding: calc(var(--grid-unit)) calc(var(--grid-unit) * 1.5);
    background: rgba(34, 197, 94, 0.95);
    border: 1px solid rgba(34, 197, 94, 0.3);
    border-radius: 20px;
    color: white;
    font-weight: 600;
    font-size: 0.75rem;
    box-shadow: 0 2px 8px rgba(34, 197, 94, 0.3);
    backdrop-filter: blur(10px);
    z-index: 10;
    animation: slideInRight 0.3s ease-out;
  }

  @keyframes slideInRight {
    from {
      opacity: 0;
      transform: translateX(20px) scale(0.9);
    }
    to {
      opacity: 1;
      transform: translateX(0) scale(1);
    }
  }

  .rsvp-loading-global {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: calc(var(--grid-unit));
    padding: calc(var(--grid-unit) * 4);
    color: var(--color-text-muted);
    font-style: italic;
  }

  .loading-spinner-global,
  .updating-spinner-global {
    width: 20px;
    height: 20px;
    border: 2px solid var(--color-border);
    border-top: 2px solid var(--color-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .updating-spinner-global {
    width: 14px;
    height: 14px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top-color: white;
    border-radius: 50%;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .rsvp-error-global {
    text-align: center;
    padding: calc(var(--grid-unit) * 3);
    color: var(--color-accent);
  }

  .retry-button {
    background: var(--color-accent);
    color: white;
    border: none;
    padding: calc(var(--grid-unit)) calc(var(--grid-unit) * 2);
    border-radius: 4px;
    cursor: pointer;
    font-family: var(--font-heading-secondary);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-top: calc(var(--grid-unit));
    transition: all 0.2s ease;
  }

  .retry-button:hover {
    background: var(--color-text-primary);
    transform: translateY(-1px);
  }

  .rsvp-grid-container {
    background: var(--color-surface);
    border: 2px solid var(--color-border);
    border-radius: 12px;
    padding: calc(var(--grid-unit) * 3);
    overflow-x: auto;
  }

  .rsvp-grid {
    display: grid;
    grid-template-columns: 1fr repeat(3, 1fr);
    gap: 1px;
    background: var(--color-border);
    border-radius: 8px;
    overflow: hidden;
    width: 100%;
    min-width: 100%;
  }

  .grid-header {
    display: contents;
  }

  .meeting-header-cell,
  .child-header-cell {
    background: var(--color-accent);
    color: white;
    padding: calc(var(--grid-unit) * 2);
    font-family: var(--font-heading-secondary);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    text-align: center;
    font-size: 0.9rem;
  }

  .meeting-header-cell {
    text-align: left;
  }

  .mobile-meeting-header,
  .mobile-child-initials,
  .mobile-meeting-info {
    display: none;
  }

  .desktop-meeting-header,
  .desktop-child-name,
  .desktop-meeting-info {
    display: block;
  }

  .grid-row {
    display: contents;
  }

  .meeting-cell {
    background: var(--color-background);
    padding: calc(var(--grid-unit) * 2);
    display: flex;
    align-items: center;
  }

  .meeting-info {
    width: 100%;
  }

  .meeting-link {
    font-weight: 600;
    color: var(--color-text-primary);
    text-decoration: none;
    font-size: 0.95rem;
    line-height: 1.3;
    display: block;
    margin-bottom: calc(var(--grid-unit) / 2);
  }

  .meeting-link:hover {
    color: var(--color-accent);
  }

  .meeting-date {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .meeting-time {
    font-family: var(--font-heading-secondary);
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-top: calc(var(--grid-unit) * 1.5);
  }

  .mobile-meeting-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-decoration: none;
    color: var(--color-text-primary);
    gap: calc(var(--grid-unit) / 4);
  }

  .mobile-month {
    font-family: var(--font-heading-secondary);
    font-size: 0.7rem;
    font-weight: 600;
    color: var(--color-text-primary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1;
  }

  .mobile-day {
    font-family: var(--font-mono);
    font-size: 0.6rem;
    font-weight: 400;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1;
  }

  .mobile-time-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: calc(var(--grid-unit) / 8);
    margin-top: calc(var(--grid-unit) / 6);
  }

  .mobile-time {
    font-family: var(--font-heading-secondary);
    font-size: 0.5rem;
    font-weight: 600;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1;
  }

  .mobile-duration {
    font-family: var(--font-heading-secondary);
    font-size: 0.4rem;
    font-weight: 600;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1;
  }

  .mobile-meeting-link:hover .mobile-month {
    color: var(--color-accent);
  }

  .rsvp-cell {
    background: var(--color-background);
    padding: calc(var(--grid-unit) * 1.5);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: calc(var(--grid-unit));
    position: relative;
    transition: all 0.3s ease;
  }

  .rsvp-cell.status-attending {
    background: linear-gradient(135deg, rgba(34, 197, 94, 0.25) 0%, rgba(34, 197, 94, 0.15) 100%);
    border: 1px solid rgba(34, 197, 94, 0.4);
  }

  .rsvp-cell.status-not-attending {
    background: linear-gradient(135deg, rgba(239, 68, 68, 0.25) 0%, rgba(239, 68, 68, 0.15) 100%);
    border: 1px solid rgba(239, 68, 68, 0.4);
  }

  .cell-status {
    font-size: 1.5rem;
    text-align: center;
    cursor: pointer;
  }

  .cell-buttons {
    display: flex;
    gap: calc(var(--grid-unit) / 2);
  }

  .cell-hover-option {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 5;
    display: none;
  }

  /* Show buttons when no answer is selected (default state) */
  .rsvp-cell:not(.has-answer) .cell-buttons {
    display: flex;
  }

  .rsvp-cell:not(.has-answer) .cell-status {
    display: none;
  }

  .rsvp-cell:not(.has-answer) .cell-hover-option {
    display: none;
  }

  /* Hide buttons and show status when answer is selected */
  .rsvp-cell.has-answer .cell-buttons {
    display: none;
  }

  .rsvp-cell.has-answer .cell-status {
    display: block;
  }

  .rsvp-cell.has-answer .cell-hover-option {
    display: none;
  }

  /* Show hover option when hovering over answered cell (but not while saving) */
  .rsvp-cell.has-answer:hover:not(.saving) .cell-status {
    display: none;
  }

  .rsvp-cell.has-answer:hover:not(.saving) .cell-hover-option {
    display: block;
  }

  /* Ensure status stays visible while saving */
  .rsvp-cell.saving .cell-status {
    display: block !important;
  }

  .rsvp-cell.saving .cell-hover-option {
    display: none !important;
  }

  .cell-btn {
    background: transparent;
    border: 2px solid var(--color-border);
    border-radius: 50%;
    width: 32px;
    height: 32px;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cell-btn:hover {
    transform: scale(1.1);
    border-color: var(--color-accent);
  }

  .cell-btn:active {
    transform: scale(0.95);
  }

  .cell-btn.active {
    border-color: var(--color-accent);
    background: rgba(220, 38, 38, 0.1);
  }

  .cell-btn.active[data-status="üëç"] {
    border-color: #16a34a;
    background: rgba(34, 197, 94, 0.15);
  }

  .cell-btn.active[data-status="üëé"] {
    border-color: #dc2626;
    background: rgba(239, 68, 68, 0.15);
  }

  .cell-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  @media (max-width: 1024px) {
    .rsvp-page-container {
      padding: calc(var(--grid-unit) * 2);
    }

    .rsvp-header h1 {
      font-size: 2.5rem;
    }

    .meeting-header-cell,
    .child-header-cell {
      padding: calc(var(--grid-unit) * 1.5);
      font-size: 0.8rem;
    }

    .meeting-cell {
      padding: calc(var(--grid-unit) * 1.5);
    }

    .meeting-link {
      font-size: 0.85rem;
    }

    .meeting-date {
      font-size: 0.75rem;
    }

    .meeting-time {
      font-size: 0.7rem;
    }

    .rsvp-cell {
      padding: calc(var(--grid-unit));
    }

    .cell-btn {
      width: 28px;
      height: 28px;
      font-size: 0.9rem;
    }

    .cell-status {
      font-size: 1.3rem;
    }
  }

  @media (max-width: 768px) {
    .rsvp-page-container {
      padding: calc(var(--grid-unit));
    }

    .rsvp-header h1 {
      font-size: 2rem;
    }

    .rsvp-grid-container {
      overflow-x: auto;
      padding: 0;
    }

    .rsvp-grid {
      width: 100%;
      grid-template-columns: minmax(45px, 1fr) repeat(3, minmax(30px, 1fr));
    }

    /* Switch to mobile layout */
    .desktop-meeting-header,
    .desktop-child-name,
    .desktop-meeting-info {
      display: none;
    }

    .mobile-meeting-header,
    .mobile-child-initials,
    .mobile-meeting-info {
      display: block;
    }

    .meeting-header-cell,
    .child-header-cell {
      padding: calc(var(--grid-unit) * 0.25) calc(var(--grid-unit) * 0.0625);
      font-size: 0.6rem;
      line-height: 1.2;
      text-align: center;
    }

    .meeting-cell {
      padding: calc(var(--grid-unit) * 0.5) calc(var(--grid-unit) * 0.0625);
    }

    .meeting-link {
      font-size: 0.7rem;
      line-height: 1.2;
    }

    .meeting-date {
      font-size: 0.6rem;
    }

    .meeting-time {
      font-size: 0.55rem;
    }

    .rsvp-cell {
      padding: calc(var(--grid-unit) * 0.25) calc(var(--grid-unit) * 0.03125);
      gap: calc(var(--grid-unit) / 3);
      min-height: 50px;
    }

    .cell-buttons {
      flex-direction: column;
      gap: calc(var(--grid-unit) / 2);
    }

    .cell-btn {
      width: 24px;
      height: 24px;
      font-size: 0.8rem;
      border-width: 1px;
    }

    .cell-status {
      font-size: 0.9rem;
    }

    .rsvp-updating-global {
      position: fixed;
      top: calc(var(--grid-unit) * 2);
      right: calc(var(--grid-unit) * 2);
      margin-top: 0;
      z-index: 1000;
    }
  }

  @media (max-width: 480px) {
    .rsvp-page-container {
      padding: calc(var(--grid-unit) * 0.5);
    }

    .rsvp-grid {
      grid-template-columns: minmax(35px, 1fr) repeat(3, minmax(25px, 1fr));
    }

    .meeting-header-cell,
    .child-header-cell {
      padding: calc(var(--grid-unit) * 0.125) 0;
      font-size: 0.45rem;
    }

    .mobile-month {
      font-size: 0.55rem;
    }

    .mobile-day {
      font-size: 0.45rem;
    }

    .meeting-link {
      font-size: 0.6rem;
    }

    .meeting-date {
      font-size: 0.5rem;
    }

    .meeting-time {
      font-size: 0.45rem;
    }

    .mobile-time {
      font-size: 0.35rem;
    }

    .mobile-duration {
      font-size: 0.3rem;
    }

    .cell-buttons {
      gap: calc(var(--grid-unit) / 3);
    }

    .cell-btn {
      width: 20px;
      height: 20px;
      font-size: 0.65rem;
    }

    .cell-status {
      font-size: 0.7rem;
    }

    .rsvp-cell {
      min-height: 50px;
      padding: calc(var(--grid-unit) * 0.25) 0;
    }
  }
</style>

<script define:vars={{ RSVP_API_URL, coaches }}>
  (function(){
    function CoachRSVPGrid() {
      this.apiUrl = RSVP_API_URL;
      this.coaches = coaches;
      this.currentData = null;
      this.cacheKey = 'rsvps:coaches:all';
      this.cacheTtlMs = 2 * 60 * 1000;
      this.init();
    }

    CoachRSVPGrid.prototype.init = function() {
      this.bindEvents();
      var cached = this.getCached();
      var self = this;
      if (cached) {
        self.renderAllRSVPData(cached);
        self.showContent();
        self.loadAllRSVPData({ background: true });
      } else {
        self.loadAllRSVPData({ background: false });
      }
    };

    CoachRSVPGrid.prototype.bindEvents = function() {
      var self = this;
      var retryBtn = document.getElementById('rsvp-retry-global');
      if (retryBtn) {
        retryBtn.addEventListener('click', function(){ self.loadAllRSVPData(); });
      }

      document.addEventListener('click', function(e){
        if (e.target.classList.contains('cell-btn') || e.target.classList.contains('cell-hover-btn')) {
          var coach = e.target.dataset.child;
          var meetingDate = e.target.dataset.meetingDate;
          var status = e.target.dataset.status;
          if (e.target.classList.contains('cell-hover-btn')) {
            status = '';
          }
          self.updateRSVP(meetingDate, coach, status);
        }
      });

      document.addEventListener('click', function(e){
        if (e.target.classList.contains('cell-status')) {
          var rsvpCell = e.target.closest('.rsvp-cell');
          if (rsvpCell && rsvpCell.classList.contains('has-answer')) {
            var coach = rsvpCell.dataset.child;
            var meetingDate = rsvpCell.dataset.meetingDate;
            var currentStatus = e.target.textContent;
            var newStatus;
            if (currentStatus === 'üëç') {
              newStatus = 'üëé';
            } else if (currentStatus === 'üëé') {
              newStatus = '';
            } else {
              newStatus = 'üëç';
            }
            self.updateRSVP(meetingDate, coach, newStatus);
          }
        }
      });
    };

    CoachRSVPGrid.prototype.loadAllRSVPData = function(opts) {
      opts = opts || {};
      if (!opts.background) this.showLoading();
      function fetchWithTimeout(input, init, timeoutMs) {
        init = init || {};
        timeoutMs = typeof timeoutMs === 'number' ? timeoutMs : 5000;
        var supportsAbort = typeof AbortController !== 'undefined';
        var controller = supportsAbort ? new AbortController() : null;
        var timer = setTimeout(function(){ if (controller) controller.abort(); }, timeoutMs);
        var p = Promise.race([
          fetch(input, (function(){
            var merged = {};
            for (var k in init) { if (Object.prototype.hasOwnProperty.call(init, k)) merged[k] = init[k]; }
            if (controller) merged.signal = controller.signal;
            return merged;
          })()),
          new Promise(function(_, reject){ setTimeout(function(){ reject(new Error('timeout')); }, timeoutMs); })
        ]);
        return p.finally(function(){ clearTimeout(timer); });
      }

      var self = this;
      try {
        var url = new URL(this.apiUrl);
        url.searchParams.set('action', 'get');
        url.searchParams.set('_cb', String(Date.now()));
        console.log('Making Coach RSVP API request to:', url.toString());
        fetchWithTimeout(url.toString(), { cache: 'no-store', redirect: 'follow' }, 15000)
          .then(function(response){
            if (!response.ok) throw new Error('HTTP ' + response.status + ': ' + response.statusText);
            return response.json();
          })
          .then(function(data){
            self.currentData = data;
            self.setCached(data);
            self.renderAllRSVPData(data);
            self.showContent();
          })
          .catch(function(error){
            console.error('Coach RSVP API Error:', error);
            var cached = self.getCached();
            if (cached) {
              self.renderAllRSVPData(cached);
              self.showContent();
            } else {
              self.showError('Unable to load RSVP data: ' + (error.message || error.toString()));
            }
          });
      } catch (e) {
        this.showError('Unable to load RSVP data');
      }
    };

    CoachRSVPGrid.prototype.updateRSVP = function(meetingDate, coachName, status) {
      this.updateCellOptimistically(meetingDate, coachName, status);
      this.setCellButtonsDisabled(meetingDate, coachName, true);
      this.showUpdating();
      var self = this;
      try {
        var updateUrl = new URL(this.apiUrl);
        updateUrl.searchParams.set('action', 'update');
        updateUrl.searchParams.set('meetingDate', meetingDate);
        updateUrl.searchParams.set('kidName', coachName);
        updateUrl.searchParams.set('status', status);
        fetch(updateUrl.toString(), { method: 'GET', redirect: 'follow' })
          .then(function(response){
            if (response.ok) {
              return response.json().then(function(result){
                if (result.success) {
                  var cached = self.getCached();
                  if (cached) {
                    var idx = -1;
                    for (var i=0;i<cached.length;i++) {
                      var m = cached[i];
                      var d = m.meetingDate.indexOf('T')>-1 ? m.meetingDate.split('T')[0] : m.meetingDate;
                      if (d === meetingDate) { idx = i; break; }
                    }
                    if (idx >= 0) {
                      var kids = cached[idx].kids || [];
                      var ki = -1; for (var j=0;j<kids.length;j++){ if (kids[j].name === coachName) { ki=j; break; } }
                      if (ki >= 0) kids[ki].status = status; else kids.push({ name: coachName, status: status });
                      self.setCached(cached);
                    }
                  }
                }
                self.hideUpdating();
              });
            } else {
              self.hideUpdating();
            }
          })
          .catch(function(){ self.hideUpdating(); })
          .finally(function(){ self.setCellButtonsDisabled(meetingDate, coachName, false); });
      } catch (e) {
        this.hideUpdating();
        this.setCellButtonsDisabled(meetingDate, coachName, false);
      }
    };

    CoachRSVPGrid.prototype.updateCellOptimistically = function(meetingDate, coachName, status) {
      var statusElement = document.getElementById('status-' + meetingDate + '-' + coachName);
      if (statusElement) statusElement.textContent = status || '‚ùì';
      var buttons = document.querySelectorAll('[data-child="' + coachName + '"][data-meeting-date="' + meetingDate + '"]');
      for (var i=0;i<buttons.length;i++) {
        var btn = buttons[i];
        if (btn.classList.contains('cell-btn')) {
          btn.classList.remove('active');
          if (btn.dataset.status === status) btn.classList.add('active');
        }
      }
      var rsvpCell = document.querySelector('[data-child="' + coachName + '"][data-meeting-date="' + meetingDate + '"].rsvp-cell');
      if (rsvpCell) {
        rsvpCell.classList.remove('status-attending', 'status-not-attending', 'has-answer');
        if (status === 'üëç') rsvpCell.classList.add('status-attending', 'has-answer');
        else if (status === 'üëé') rsvpCell.classList.add('status-not-attending', 'has-answer');
        var hoverBtn = rsvpCell.querySelector('.cell-hover-btn');
        if (hoverBtn && status) {
          hoverBtn.textContent = '‚ùå';
          hoverBtn.dataset.child = coachName;
          hoverBtn.dataset.meetingDate = meetingDate;
        }
        rsvpCell.classList.add('saving');
      }
    };

    CoachRSVPGrid.prototype.renderAllRSVPData = function(allData) {
      var dataMap = new Map();
      for (var i=0;i<allData.length;i++) {
        var meetingData = allData[i];
        var meetingDate = meetingData.meetingDate;
        var apiDateOnly = meetingDate.indexOf('T')>-1 ? meetingDate.split('T')[0] : meetingDate;
        var coachesMap = new Map();
        if (meetingData.kids) {
          for (var j=0;j<meetingData.kids.length;j++) {
            var person = meetingData.kids[j];
            coachesMap.set(person.name, person.status || '');
          }
        }
        dataMap.set(apiDateOnly, coachesMap);
      }
      var gridRows = document.querySelectorAll('.grid-row');
      for (var r=0;r<gridRows.length;r++) {
        var row = gridRows[r];
        var d = row.dataset.meetingDate;
        var mData = dataMap.get(d);
        for (var c=0;c<this.coaches.length;c++) {
          var coach = this.coaches[c];
          var statusElement = document.getElementById('status-' + d + '-' + coach);
          var rsvpCell = document.querySelector('[data-child="' + coach + '"][data-meeting-date="' + d + '"].rsvp-cell');
          var status = '';
          if (mData && mData.has(coach)) status = mData.get(coach);
          if (statusElement) statusElement.textContent = status || '‚ùì';
          var buttons = document.querySelectorAll('[data-child="' + coach + '"][data-meeting-date="' + d + '"].cell-btn');
          for (var b=0;b<buttons.length;b++) {
            var btn = buttons[b];
            btn.classList.remove('active');
            if (btn.dataset.status === status) btn.classList.add('active');
          }
          if (rsvpCell) {
            rsvpCell.classList.remove('status-attending', 'status-not-attending', 'has-answer');
            if (status === 'üëç') rsvpCell.classList.add('status-attending', 'has-answer');
            else if (status === 'üëé') rsvpCell.classList.add('status-not-attending', 'has-answer');
            var hoverBtn = rsvpCell.querySelector('.cell-hover-btn');
            if (hoverBtn && (status === 'üëç' || status === 'üëé')) {
              hoverBtn.textContent = '‚ùå';
              hoverBtn.dataset.child = coach;
              hoverBtn.dataset.meetingDate = d;
            }
          }
        }
      }
    };

    CoachRSVPGrid.prototype.setCellButtonsDisabled = function(meetingDate, coachName, disabled) {
      var buttons = document.querySelectorAll('[data-child="' + coachName + '"][data-meeting-date="' + meetingDate + '"].cell-btn');
      for (var i=0;i<buttons.length;i++) buttons[i].disabled = disabled;
      if (!disabled) {
        var rsvpCell = document.querySelector('[data-child="' + coachName + '"][data-meeting-date="' + meetingDate + '"].rsvp-cell');
        if (rsvpCell) rsvpCell.classList.remove('saving');
      }
    };

    CoachRSVPGrid.prototype.showLoading = function(){
      document.getElementById('rsvp-loading-global').style.display = 'flex';
      document.getElementById('rsvp-error-global').style.display = 'none';
      document.getElementById('rsvp-grid-container').style.display = 'none';
    };
    CoachRSVPGrid.prototype.showError = function(message){
      document.getElementById('rsvp-error-message-global').textContent = message;
      document.getElementById('rsvp-loading-global').style.display = 'none';
      document.getElementById('rsvp-error-global').style.display = 'block';
      document.getElementById('rsvp-grid-container').style.display = 'none';
    };
    CoachRSVPGrid.prototype.showContent = function(){
      document.getElementById('rsvp-loading-global').style.display = 'none';
      document.getElementById('rsvp-error-global').style.display = 'none';
      document.getElementById('rsvp-grid-container').style.display = 'block';
    };
    CoachRSVPGrid.prototype.showUpdating = function(){
      document.getElementById('rsvp-updating-global').style.display = 'flex';
    };
    CoachRSVPGrid.prototype.hideUpdating = function(){
      document.getElementById('rsvp-updating-global').style.display = 'none';
    };

    CoachRSVPGrid.prototype.getCached = function(){
      try {
        var raw = localStorage.getItem(this.cacheKey);
        if (!raw) return null;
        var parsed = JSON.parse(raw);
        if (!parsed || !parsed.fetchedAt) return null;
        return parsed.data;
      } catch (e) { return null; }
    };
    CoachRSVPGrid.prototype.setCached = function(data){
      try { localStorage.setItem(this.cacheKey, JSON.stringify({ data: data, fetchedAt: Date.now() })); } catch (e) {}
    };

    function init(){ new CoachRSVPGrid(); }
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  })();
</script>
