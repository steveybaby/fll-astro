---
import { getCollection } from 'astro:content';
import Layout from '../components/Layout.astro';
import { formatMeetingTime } from '../utils/meeting-time.ts';

// Get all meetings and filter to future meetings only
const meetings = await getCollection('meetings');
const now = new Date();
const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());

const futureMeetings = meetings
  .filter(meeting => {
    const meetingDate = meeting.data.date instanceof Date 
      ? meeting.data.date 
      : new Date(`${meeting.data.date}T00:00:00Z`);
    return meetingDate >= todayStart;
  })
  .sort((a, b) => {
    const dateA = a.data.date instanceof Date ? a.data.date : new Date(`${a.data.date}T00:00:00Z`);
    const dateB = b.data.date instanceof Date ? b.data.date : new Date(`${b.data.date}T00:00:00Z`);
    return dateA.getTime() - dateB.getTime();
  });

const sortedMeetings = futureMeetings;

// Fixed list of children in specified order
const children = ['Jasper', 'Asher', 'Kai', 'Jeremiah', 'Luca', 'Ethan'];

// Child initials for mobile display
const childInitials = {
  'Jasper': 'JH',
  'Asher': 'AO', 
  'Kai': 'KP',
  'Jeremiah': 'JR',
  'Luca': 'LS',
  'Ethan': 'EM'
};

// API endpoint - using same backend as RSVPs but different action
const SNACK_API_URL = 'https://script.google.com/macros/s/AKfycbwFpY_VgGndIStuh1UOu1wA--QXMDWjVLaiLAjqMDOO58x9dA2H4RkOJ8daCtyc8BNPfQ/exec';

// Helper function to format meeting date
const formatMeetingDisplay = (date) => {
  const raw = date instanceof Date ? date : new Date(`${date}T00:00:00Z`);
  return new Intl.DateTimeFormat('en-US', {
    weekday: 'short',
    month: 'short',
    day: 'numeric',
    timeZone: 'UTC',
  }).format(raw);
};

const formatMeetingMobile = (date) => {
  const raw = date instanceof Date ? date : new Date(`${date}T00:00:00Z`);
  const month = new Intl.DateTimeFormat('en-US', {
    month: 'short',
    timeZone: 'UTC',
  }).format(raw);
  const day = new Intl.DateTimeFormat('en-US', {
    day: 'numeric',
    timeZone: 'UTC',
  }).format(raw);
  return { month, day };
};

const formatMeetingTimeMobile = (startTime, duration) => {
  if (!startTime) {
    return { time: '', duration: '' };
  }
  
  const [hours, minutes] = startTime.split(':').map(Number);
  const period = hours >= 12 ? 'pm' : 'am';
  const displayHour = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;
  const displayMinutes = minutes > 0 ? `:${minutes.toString().padStart(2, '0')}` : '';
  
  const timeString = `${displayHour}${displayMinutes}${period}`;
  const durationText = duration ? (duration === 1 ? '1hr' : `${duration}hrs`) : '';
  
  return { time: timeString, duration: durationText };
};

const formatMeetingISO = (date) => {
  const raw = date instanceof Date ? date : new Date(`${date}T00:00:00Z`);
  return new Intl.DateTimeFormat('en-CA', { timeZone: 'UTC' }).format(raw);
};
---

<Layout title="Snack Signup - Team Overview" description="Coordinate snack contributions for all FLL team meetings">
  <div class="snack-page-container">
    <header class="snack-header">
      <h1>üç∞ Snack Signup</h1>
      <p>Coordinate snack contributions for all team meetings</p>
      
      <div class="snack-updating-global" id="snack-updating-global" style="display: none;">
        <div class="updating-spinner-global"></div>
        <span>Saving...</span>
      </div>
    </header>

    <div class="snack-loading-global" id="snack-loading-global">
      <div class="loading-spinner-global"></div>
      <span>Loading snack signup data from Google Sheets...</span>
    </div>

    <div class="snack-error-global" id="snack-error-global" style="display: none;">
      <p id="snack-error-message-global">Unable to load snack signup data</p>
      <button id="snack-retry-global" class="retry-button">Try Again</button>
    </div>

    <div class="snack-grid-container" id="snack-grid-container" style="display: none;">
      <div class="snack-grid">
        <!-- Header row with children names -->
        <div class="grid-header">
          <div class="meeting-header-cell">
            <span class="desktop-meeting-header">Meeting</span>
            <span class="mobile-meeting-header">Date</span>
          </div>
          {children.map((child) => (
            <div class="child-header-cell" title={child}>
              <span class="desktop-child-name">{child}</span>
              <span class="mobile-child-initials">{childInitials[child]}</span>
            </div>
          ))}
        </div>

        <!-- Meeting rows -->
        {sortedMeetings.map((meeting) => {
          const isoDate = formatMeetingISO(meeting.data.date);
          const displayDate = formatMeetingDisplay(meeting.data.date);
          const mobileDate = formatMeetingMobile(meeting.data.date);
          const meetingTime = formatMeetingTime(meeting.data.startTime, meeting.data.duration);
          const mobileTime = formatMeetingTimeMobile(meeting.data.startTime, meeting.data.duration);
          
          return (
            <div class="grid-row" data-meeting-date={isoDate}>
              <div class="meeting-cell" title={meeting.data.title}>
                <div class="meeting-info desktop-meeting-info">
                  <a href={`/meetings/${meeting.slug}/`} class="meeting-link">
                    {meeting.data.title}
                  </a>
                  <div class="meeting-date">{displayDate}</div>
                  {meetingTime && <div class="meeting-time">{meetingTime}</div>}
                </div>
                <div class="meeting-info mobile-meeting-info">
                  <a href={`/meetings/${meeting.slug}/`} class="mobile-meeting-link">
                    <div class="mobile-month">{mobileDate.month}</div>
                    <div class="mobile-day">{mobileDate.day}</div>
                    {mobileTime.time && (
                      <div class="mobile-time-container">
                        <div class="mobile-time">{mobileTime.time}</div>
                        {mobileTime.duration && <div class="mobile-duration">{mobileTime.duration}</div>}
                      </div>
                    )}
                  </a>
                </div>
              </div>
              {children.map((child) => (
                <div class="snack-cell" data-child={child} data-meeting-date={isoDate}>
                  <div class="cell-status" id={`status-${isoDate}-${child}`}>‚ùì</div>
                  <div class="cell-buttons">
                    <button 
                      class="cell-btn cell-cake" 
                      data-child={child} 
                      data-meeting-date={isoDate}
                      data-status="üç∞"
                      aria-label={`Mark ${child}'s family as bringing snacks for ${meeting.data.title}`}
                    >
                      üç∞
                    </button>
                  </div>
                  <div class="cell-hover-option">
                    <button 
                      class="cell-btn cell-hover-btn" 
                      data-child={child}
                      data-meeting-date={isoDate}
                      aria-label="Remove snack assignment"
                    >
                      ‚ùå
                    </button>
                  </div>
                </div>
              ))}
            </div>
          );
        })}
      </div>
    </div>
  </div>
</Layout>

<style>
  .snack-page-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: calc(var(--grid-unit) * 3);
  }

  .snack-header {
    text-align: center;
    margin-bottom: calc(var(--grid-unit) * 4);
    position: relative;
  }

  .snack-header h1 {
    font-family: var(--font-heading-primary);
    font-size: 3rem;
    font-weight: 900;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1.1;
    margin: 0 0 calc(var(--grid-unit) * 2) 0;
  }

  .snack-header p {
    font-size: 1.125rem;
    color: var(--color-text-muted);
    margin: 0;
  }

  .snack-updating-global {
    position: absolute;
    top: calc(var(--grid-unit) * 2);
    right: 0;
    display: flex;
    align-items: center;
    gap: calc(var(--grid-unit) / 2);
    padding: calc(var(--grid-unit)) calc(var(--grid-unit) * 1.5);
    background: rgba(34, 197, 94, 0.95);
    border: 1px solid rgba(34, 197, 94, 0.3);
    border-radius: 20px;
    color: white;
    font-weight: 600;
    font-size: 0.75rem;
    box-shadow: 0 2px 8px rgba(34, 197, 94, 0.3);
    backdrop-filter: blur(10px);
    z-index: 10;
    animation: slideInRight 0.3s ease-out;
  }

  @keyframes slideInRight {
    from {
      opacity: 0;
      transform: translateX(20px) scale(0.9);
    }
    to {
      opacity: 1;
      transform: translateX(0) scale(1);
    }
  }

  .snack-loading-global {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: calc(var(--grid-unit));
    padding: calc(var(--grid-unit) * 4);
    color: var(--color-text-muted);
    font-style: italic;
  }

  .loading-spinner-global,
  .updating-spinner-global {
    width: 20px;
    height: 20px;
    border: 2px solid var(--color-border);
    border-top: 2px solid var(--color-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .updating-spinner-global {
    width: 14px;
    height: 14px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top-color: white;
    border-radius: 50%;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .snack-error-global {
    text-align: center;
    padding: calc(var(--grid-unit) * 3);
    color: var(--color-accent);
  }

  .retry-button {
    background: var(--color-accent);
    color: white;
    border: none;
    padding: calc(var(--grid-unit)) calc(var(--grid-unit) * 2);
    border-radius: 4px;
    cursor: pointer;
    font-family: var(--font-heading-secondary);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-top: calc(var(--grid-unit));
    transition: all 0.2s ease;
  }

  .retry-button:hover {
    background: var(--color-text-primary);
    transform: translateY(-1px);
  }

  .snack-grid-container {
    background: var(--color-surface);
    border: 2px solid var(--color-border);
    border-radius: 12px;
    padding: calc(var(--grid-unit) * 3);
    overflow-x: auto;
  }

  .snack-grid {
    display: grid;
    grid-template-columns: 1fr repeat(6, 1fr);
    gap: 1px;
    background: var(--color-border);
    border-radius: 8px;
    overflow: hidden;
    width: 100%;
    min-width: 100%;
  }

  .grid-header {
    display: contents;
  }

  .meeting-header-cell,
  .child-header-cell {
    background: var(--color-accent);
    color: white;
    padding: calc(var(--grid-unit) * 2);
    font-family: var(--font-heading-secondary);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    text-align: center;
    font-size: 0.9rem;
  }

  .meeting-header-cell {
    text-align: left;
  }

  .mobile-meeting-header,
  .mobile-child-initials,
  .mobile-meeting-info {
    display: none;
  }

  .desktop-meeting-header,
  .desktop-child-name,
  .desktop-meeting-info {
    display: block;
  }

  .grid-row {
    display: contents;
  }

  .meeting-cell {
    background: var(--color-background);
    padding: calc(var(--grid-unit) * 2);
    display: flex;
    align-items: center;
  }

  .meeting-info {
    width: 100%;
  }

  .meeting-link {
    font-weight: 600;
    color: var(--color-text-primary);
    text-decoration: none;
    font-size: 0.95rem;
    line-height: 1.3;
    display: block;
    margin-bottom: calc(var(--grid-unit) / 2);
  }

  .meeting-link:hover {
    color: var(--color-accent);
  }

  .meeting-date {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .meeting-time {
    font-family: var(--font-heading-secondary);
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-top: calc(var(--grid-unit) / 4);
  }

  .mobile-meeting-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-decoration: none;
    color: var(--color-text-primary);
    gap: calc(var(--grid-unit) / 4);
  }

  .mobile-month {
    font-family: var(--font-heading-secondary);
    font-size: 0.7rem;
    font-weight: 600;
    color: var(--color-text-primary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1;
  }

  .mobile-day {
    font-family: var(--font-mono);
    font-size: 0.6rem;
    font-weight: 400;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1;
  }

  .mobile-time-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: calc(var(--grid-unit) / 8);
    margin-top: calc(var(--grid-unit) / 6);
  }

  .mobile-time {
    font-family: var(--font-heading-secondary);
    font-size: 0.5rem;
    font-weight: 600;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1;
  }

  .mobile-duration {
    font-family: var(--font-heading-secondary);
    font-size: 0.4rem;
    font-weight: 600;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1;
  }

  .mobile-meeting-link:hover .mobile-month {
    color: var(--color-accent);
  }

  .snack-cell {
    background: var(--color-background);
    padding: calc(var(--grid-unit) * 1.5);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: calc(var(--grid-unit));
    position: relative;
    transition: all 0.3s ease;
  }

  .snack-cell.status-bringing {
    background: linear-gradient(135deg, rgba(34, 197, 94, 0.25) 0%, rgba(34, 197, 94, 0.15) 100%);
    border: 1px solid rgba(34, 197, 94, 0.4);
  }

  .snack-cell.status-unavailable {
    background: linear-gradient(135deg, rgba(156, 163, 175, 0.25) 0%, rgba(156, 163, 175, 0.15) 100%);
    border: 1px solid rgba(156, 163, 175, 0.4);
    opacity: 0.6;
  }

  .cell-status {
    font-size: 1.5rem;
    text-align: center;
    cursor: pointer;
  }

  .cell-buttons {
    display: flex;
    gap: calc(var(--grid-unit) / 2);
  }

  .cell-hover-option {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 5;
    display: none;
  }

  /* Show buttons when no one is bringing snacks and cell is available */
  .snack-cell:not(.has-answer):not(.status-unavailable) .cell-buttons {
    display: flex;
  }

  .snack-cell:not(.has-answer) .cell-status {
    display: none;
  }

  .snack-cell:not(.has-answer) .cell-hover-option {
    display: none;
  }

  /* Hide buttons when someone else is bringing snacks (unavailable) */
  .snack-cell.status-unavailable .cell-buttons {
    display: none;
  }

  .snack-cell.status-unavailable .cell-status {
    display: block;
  }

  .snack-cell.status-unavailable .cell-hover-option {
    display: none;
  }

  /* Hide buttons and show status when this family is bringing snacks */
  .snack-cell.has-answer .cell-buttons {
    display: none;
  }

  .snack-cell.has-answer .cell-status {
    display: block;
  }

  .snack-cell.has-answer .cell-hover-option {
    display: none;
  }

  /* Show hover option when hovering over cake assignment (but not while saving) */
  .snack-cell.has-answer:hover:not(.saving) .cell-status {
    display: none;
  }

  .snack-cell.has-answer:hover:not(.saving) .cell-hover-option {
    display: block;
  }

  /* Ensure status stays visible while saving */
  .snack-cell.saving .cell-status {
    display: block !important;
  }

  .snack-cell.saving .cell-hover-option {
    display: none !important;
  }

  .cell-btn {
    background: transparent;
    border: 2px solid var(--color-border);
    border-radius: 50%;
    width: 32px;
    height: 32px;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cell-btn:hover {
    transform: scale(1.1);
    border-color: var(--color-accent);
  }

  .cell-btn:active {
    transform: scale(0.95);
  }

  .cell-btn.active {
    border-color: var(--color-accent);
    background: rgba(220, 38, 38, 0.1);
  }

  .cell-btn.active[data-status="üç∞"] {
    border-color: #16a34a;
    background: rgba(34, 197, 94, 0.15);
  }

  .cell-btn.active[data-status="‚ùå"] {
    border-color: #dc2626;
    background: rgba(239, 68, 68, 0.15);
  }

  .cell-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  @media (max-width: 1024px) {
    .snack-page-container {
      padding: calc(var(--grid-unit) * 2);
    }

    .snack-header h1 {
      font-size: 2.5rem;
    }

    .meeting-header-cell,
    .child-header-cell {
      padding: calc(var(--grid-unit) * 1.5);
      font-size: 0.8rem;
    }

    .meeting-cell {
      padding: calc(var(--grid-unit) * 1.5);
    }

    .meeting-link {
      font-size: 0.85rem;
    }

    .meeting-date {
      font-size: 0.75rem;
    }

    .meeting-time {
      font-size: 0.7rem;
    }

    .snack-cell {
      padding: calc(var(--grid-unit));
    }

    .cell-btn {
      width: 28px;
      height: 28px;
      font-size: 0.9rem;
    }

    .cell-status {
      font-size: 1.3rem;
    }
  }

  @media (max-width: 768px) {
    .snack-page-container {
      padding: calc(var(--grid-unit));
    }

    .snack-header h1 {
      font-size: 2rem;
    }

    .snack-grid-container {
      overflow-x: auto;
      padding: 0;
    }

    .snack-grid {
      width: 100%;
      grid-template-columns: minmax(45px, 1fr) repeat(6, minmax(30px, 1fr));
    }

    /* Switch to mobile layout */
    .desktop-meeting-header,
    .desktop-child-name,
    .desktop-meeting-info {
      display: none;
    }

    .mobile-meeting-header,
    .mobile-child-initials,
    .mobile-meeting-info {
      display: block;
    }

    .meeting-header-cell,
    .child-header-cell {
      padding: calc(var(--grid-unit) * 0.25) calc(var(--grid-unit) * 0.0625);
      font-size: 0.6rem;
      line-height: 1.2;
      text-align: center;
    }

    .meeting-cell {
      padding: calc(var(--grid-unit) * 0.5) calc(var(--grid-unit) * 0.0625);
    }

    .meeting-link {
      font-size: 0.7rem;
      line-height: 1.2;
    }

    .meeting-date {
      font-size: 0.6rem;
    }

    .meeting-time {
      font-size: 0.55rem;
    }

    .snack-cell {
      padding: calc(var(--grid-unit) * 0.25) calc(var(--grid-unit) * 0.03125);
      gap: calc(var(--grid-unit) / 3);
      min-height: 50px;
    }

    .cell-buttons {
      flex-direction: column;
      gap: calc(var(--grid-unit) / 2);
    }

    .cell-btn {
      width: 24px;
      height: 24px;
      font-size: 0.8rem;
      border-width: 1px;
    }

    .cell-status {
      font-size: 0.9rem;
    }

    .snack-updating-global {
      position: fixed;
      top: calc(var(--grid-unit) * 2);
      right: calc(var(--grid-unit) * 2);
      margin-top: 0;
      z-index: 1000;
    }
  }

  @media (max-width: 480px) {
    .snack-page-container {
      padding: calc(var(--grid-unit) * 0.5);
    }

    .snack-grid {
      grid-template-columns: minmax(35px, 1fr) repeat(6, minmax(25px, 1fr));
    }

    .meeting-header-cell,
    .child-header-cell {
      padding: calc(var(--grid-unit) * 0.125) 0;
      font-size: 0.45rem;
    }

    .mobile-month {
      font-size: 0.55rem;
    }

    .mobile-day {
      font-size: 0.45rem;
    }

    .meeting-link {
      font-size: 0.6rem;
    }

    .meeting-date {
      font-size: 0.5rem;
    }

    .meeting-time {
      font-size: 0.45rem;
    }

    .mobile-time {
      font-size: 0.35rem;
    }

    .mobile-duration {
      font-size: 0.3rem;
    }

    .cell-buttons {
      gap: calc(var(--grid-unit) / 3);
    }

    .cell-btn {
      width: 20px;
      height: 20px;
      font-size: 0.65rem;
    }

    .cell-status {
      font-size: 0.7rem;
    }

    .snack-cell {
      min-height: 50px;
      padding: calc(var(--grid-unit) * 0.25) 0;
    }
  }
</style>

<script define:vars={{ SNACK_API_URL, children }}>
  // Global Snack Grid JavaScript
  class SnackGrid {
    constructor() {
      this.apiUrl = SNACK_API_URL;
      this.children = children;
      this.currentData = null;
      
      this.init();
    }

    async init() {
      this.bindEvents();
      await this.loadAllSnackData();
    }

    bindEvents() {
      // Retry button
      const retryBtn = document.getElementById('snack-retry-global');
      if (retryBtn) {
        retryBtn.addEventListener('click', () => this.loadAllSnackData());
      }

      // Snack cell buttons
      document.addEventListener('click', (e) => {
        if (e.target.classList.contains('cell-btn') || e.target.classList.contains('cell-hover-btn')) {
          const child = e.target.dataset.child;
          const meetingDate = e.target.dataset.meetingDate;
          let status = e.target.dataset.status;
          
          // Handle hover button clicks (remove assignment)
          if (e.target.classList.contains('cell-hover-btn')) {
            this.removeSnackAssignment(meetingDate, child);
            return;
          }
          
          // Handle cake button clicks (assign snack duty)
          if (e.target.classList.contains('cell-cake')) {
            this.assignSnack(meetingDate, child);
            return;
          }
        }
      });
      
      // Handle status clicks for answered cells (same as hover button)
      document.addEventListener('click', (e) => {
        if (e.target.classList.contains('cell-status')) {
          const snackCell = e.target.closest('.snack-cell');
          if (snackCell && snackCell.classList.contains('has-answer')) {
            const child = snackCell.dataset.child;
            const meetingDate = snackCell.dataset.meetingDate;
            this.removeSnackAssignment(meetingDate, child);
          }
        }
      });
    }

    async loadAllSnackData(opts) {
      opts = opts || {};
      if (!opts.background) this.showLoading();
      
      // Helper with timeout (no object spread)
      function fetchWithTimeout(input, init, timeoutMs) {
        init = init || {};
        timeoutMs = typeof timeoutMs === 'number' ? timeoutMs : 5000;
        const supportsAbort = typeof AbortController !== 'undefined';
        const controller = supportsAbort ? new AbortController() : null;
        const timer = setTimeout(function(){ if (controller) controller.abort(); }, timeoutMs);
        var p = Promise.race([
          fetch(input, (function(){
            var merged = {};
            for (var k in init) { if (Object.prototype.hasOwnProperty.call(init, k)) merged[k] = init[k]; }
            if (controller) merged.signal = controller.signal;
            return merged;
          })()),
          new Promise(function(_, reject){ setTimeout(function(){ reject(new Error('timeout')); }, timeoutMs); })
        ]);
        return p.finally(function(){ clearTimeout(timer); });
      }

      try {
        console.log('Loading all snack data');
        const url = new URL(this.apiUrl);
        url.searchParams.set('action', 'getSnacks');
        url.searchParams.set('_cb', String(Date.now()));
        const response = await fetchWithTimeout(url.toString(), { cache: 'no-store' }, 5000);
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('API response:', data);
        this.currentData = data;
        this.setCached(data);
        this.renderAllSnackData(data);
        this.showContent();
        
      } catch (error) {
        console.error('Failed to load snack data:', error);
        const cached = this.getCached();
        if (cached) {
          this.renderAllSnackData(cached);
          this.showContent();
        } else {
          this.showError('Unable to load snack signup data');
        }
      }
    }

    async assignSnack(meetingDate, childName) {
      // Check if someone else is already assigned for this meeting
      const existingAssignment = this.getSnackAssignmentForMeeting(meetingDate);
      if (existingAssignment && existingAssignment !== childName) {
        alert(`${existingAssignment}'s family is already assigned to bring snacks for this meeting. Please remove their assignment first.`);
        return;
      }
      
      // Update UI immediately (optimistically) and disable buttons
      this.updateMeetingSnackAssignment(meetingDate, childName);
      this.showUpdating();
      
      try {
        console.log('Assigning snack duty:', { meetingDate, kidName: childName });
        
        // Try the real API call
        const updateUrl = new URL(this.apiUrl);
        updateUrl.searchParams.set('action', 'assignSnack');
        updateUrl.searchParams.set('meetingDate', meetingDate);
        updateUrl.searchParams.set('kidName', childName);

        console.log('Assign API call:', updateUrl.toString());
        const response = await fetch(updateUrl.toString());
        
        if (response.ok) {
          const result = await response.json();
          if (result.success) {
            console.log('Snack assignment successful');
            this.hideUpdating();
            this.removeSavingState(meetingDate);
            // Update cache (binary assignment for meeting)
            const cached = this.getCached();
            if (cached) {
              const idx = cached.findIndex(m => (m.meetingDate.includes('T') ? m.meetingDate.split('T')[0] : m.meetingDate) === meetingDate);
              if (idx >= 0) {
                cached[idx].kids = [{ name: childName, status: 'üç∞' }];
                this.setCached(cached);
              }
            }
            return;
          }
        }
        
        // If API call failed, UI is already updated optimistically
        console.warn('API call failed, keeping optimistic update');
        this.hideUpdating();
        this.removeSavingState(meetingDate);
        
      } catch (error) {
        console.error('Failed to assign snack:', error);
        this.hideUpdating();
        this.removeSavingState(meetingDate);
      }
    }

    async removeSnackAssignment(meetingDate, childName) {
      // Show updating indicator but don't update UI yet
      this.showUpdating();
      
      try {
        
        // Try the real API call
        const updateUrl = new URL(this.apiUrl);
        updateUrl.searchParams.set('action', 'removeSnack');
        updateUrl.searchParams.set('meetingDate', meetingDate);
        updateUrl.searchParams.set('kidName', childName);

        console.log('Remove API call:', updateUrl.toString());
        const response = await fetch(updateUrl.toString());
        
        if (response.ok) {
          const result = await response.json();
          if (result.success) {
            console.log('Snack removal successful');
            // Update UI immediately without full reload
            this.clearMeetingSnackAssignment(meetingDate);
            this.hideUpdating();
            // Update cache
            const cached = this.getCached();
            if (cached) {
              const idx = cached.findIndex(m => (m.meetingDate.includes('T') ? m.meetingDate.split('T')[0] : m.meetingDate) === meetingDate);
              if (idx >= 0) {
                cached[idx].kids = [];
                this.setCached(cached);
              }
            }
            return;
          }
        }
        
        // If API call failed, don't update UI
        console.warn('API call failed');
        this.hideUpdating();
        
      } catch (error) {
        console.error('Failed to remove snack assignment:', error);
        this.hideUpdating();
      }
    }

    getSnackAssignmentForMeeting(meetingDate) {
      // Check who is currently assigned to bring snacks for this meeting
      const gridRow = document.querySelector(`[data-meeting-date="${meetingDate}"]`);
      if (!gridRow) return null;
      
      for (const child of this.children) {
        const statusElement = document.getElementById(`status-${meetingDate}-${child}`);
        if (statusElement && statusElement.textContent === 'üç∞') {
          return child;
        }
      }
      return null;
    }

    updateMeetingSnackAssignment(meetingDate, assignedChild) {
      // Update all cells for this meeting
      this.children.forEach(child => {
        const statusElement = document.getElementById(`status-${meetingDate}-${child}`);
        const snackCell = document.querySelector(`[data-child="${child}"][data-meeting-date="${meetingDate}"].snack-cell`);
        
        if (!statusElement || !snackCell) return;
        
        // Remove all status classes first
        snackCell.classList.remove('status-bringing', 'status-unavailable', 'has-answer', 'saving');
        
        if (child === assignedChild) {
          // This child is bringing snacks
          statusElement.textContent = 'üç∞';
          snackCell.classList.add('status-bringing', 'has-answer', 'saving');
        } else {
          // This child is not available (someone else is bringing)
          statusElement.textContent = '‚ùå';
          snackCell.classList.add('status-unavailable');
        }
      });
    }

    clearMeetingSnackAssignment(meetingDate) {
      // Clear assignment for all cells in this meeting
      this.children.forEach(child => {
        const statusElement = document.getElementById(`status-${meetingDate}-${child}`);
        const snackCell = document.querySelector(`[data-child="${child}"][data-meeting-date="${meetingDate}"].snack-cell`);
        
        if (!statusElement || !snackCell) return;
        
        // Reset to default state
        statusElement.textContent = '‚ùì';
        snackCell.classList.remove('status-bringing', 'status-unavailable', 'has-answer', 'saving');
      });
    }

    renderAllSnackData(allData) {
      // Create a lookup map for quick access - now expecting binary data
      const assignmentMap = new Map();
      
      // Process data to find who's assigned to bring snacks for each meeting
      allData.forEach(meetingData => {
        const meetingDate = meetingData.meetingDate;
        // Convert API date to YYYY-MM-DD format for comparison
        const apiDateOnly = meetingDate.includes('T') ? meetingDate.split('T')[0] : meetingDate;
        
        // Find who has the cake assignment for this meeting
        let assignedChild = null;
        if (meetingData.kids) {
          meetingData.kids.forEach(kid => {
            if (kid.status === 'üç∞') {
              assignedChild = kid.name;
            }
          });
        }
        
        assignmentMap.set(apiDateOnly, assignedChild);
      });

      // Update all cells based on assignments
      const gridRows = document.querySelectorAll('.grid-row');
      gridRows.forEach(row => {
        const meetingDate = row.dataset.meetingDate;
        const assignedChild = assignmentMap.get(meetingDate);
        
        this.children.forEach(child => {
          const statusElement = document.getElementById(`status-${meetingDate}-${child}`);
          const snackCell = document.querySelector(`[data-child="${child}"][data-meeting-date="${meetingDate}"].snack-cell`);
          
          if (!statusElement || !snackCell) return;
          
          // Remove all status classes first
          snackCell.classList.remove('status-bringing', 'status-unavailable', 'has-answer');
          
          if (assignedChild === child) {
            // This child is assigned to bring snacks
            statusElement.textContent = 'üç∞';
            snackCell.classList.add('status-bringing', 'has-answer');
          } else if (assignedChild) {
            // Someone else is assigned, this child is unavailable
            statusElement.textContent = '‚ùå';
            snackCell.classList.add('status-unavailable');
          } else {
            // No one is assigned yet, this child is available
            statusElement.textContent = '‚ùì';
            // No additional classes needed - default state
          }
        });
      });
    }

    removeSavingState(meetingDate) {
      // Remove saving class from all cells in this meeting
      this.children.forEach(child => {
        const snackCell = document.querySelector(`[data-child="${child}"][data-meeting-date="${meetingDate}"].snack-cell`);
        if (snackCell) {
          snackCell.classList.remove('saving');
        }
      });
    }

    showLoading() {
      document.getElementById('snack-loading-global').style.display = 'flex';
      document.getElementById('snack-error-global').style.display = 'none';
      document.getElementById('snack-grid-container').style.display = 'none';
    }

    showError(message) {
      document.getElementById('snack-error-message-global').textContent = message;
      document.getElementById('snack-loading-global').style.display = 'none';
      document.getElementById('snack-error-global').style.display = 'block';
      document.getElementById('snack-grid-container').style.display = 'none';
    }

    showContent() {
      document.getElementById('snack-loading-global').style.display = 'none';
      document.getElementById('snack-error-global').style.display = 'none';
      document.getElementById('snack-grid-container').style.display = 'block';
    }

    showUpdating() {
      document.getElementById('snack-updating-global').style.display = 'flex';
    }

    hideUpdating() {
      document.getElementById('snack-updating-global').style.display = 'none';
    }

    // Cache helpers
    getCached() {
      try {
        const raw = localStorage.getItem(this.cacheKey);
        if (!raw) return null;
        const parsed = JSON.parse(raw);
        if (!parsed || !parsed.fetchedAt) return null;
        const fresh = Date.now() - parsed.fetchedAt < this.cacheTtlMs;
        return fresh ? parsed.data : parsed.data; // allow stale while revalidating
      } catch (e) { return null; }
    }
    setCached(data) {
      try { localStorage.setItem(this.cacheKey, JSON.stringify({ data: data, fetchedAt: Date.now() })); } catch (e) {}
    }
  }

  // Initialize when DOM is ready
  const __initSnackGrid = () => new SnackGrid();
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', __initSnackGrid, { once: true });
  } else {
    __initSnackGrid();
  }
</script>
